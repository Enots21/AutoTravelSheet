import datetime
import logging
import re

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from tgbot.DB.database import db
from tgbot.Keyboar import start_vod, cars_number, info_vod, rep_start, reinfoveh, access_vod
from tgbot.states import Gen

router = Router()  # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
storage = MemoryStorage()  # –°–æ–∑–¥–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞

logging.basicConfig(level=logging.INFO, filename="logi.log", filemode="w", encoding="utf-8",
                    format="%(asctime)s - %(name)s - %(module)s - %(message)s ‚úîÔ∏è ")


@router.message(Command("start"))  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
async def send_welcome(message: types.Message):
    logging.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö')
    try:
        if not await db.create_tables():
            logging.info('–¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã')  # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ —É—Å–ø–µ—Ö–∞
        else:
            logging.info('–¢–∞–±–ª–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç')

        if not await db.user_exists(message.from_user.id):  # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await sta_reg(message)
        elif not await db.info_number_car(message.from_user.id):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–≤—Ç–æ
            await env_reg(message)
        else:
            await gen_info(message)
    except Exception as err:  # –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        logging.error(f'–û—à–∏–±–∫–∞: {err}‚ùå')  # –ë–æ–ª–µ–µ –æ–±—â–∏–π –≤—ã–≤–æ–¥ –æ—à–∏–±–∫–∏


# ==========================–ù–ê–ß–ê–õ–û
async def sta_reg(message: types.Message):
    logging.info('–ù–∞—á–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞')
    stext = ('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã!üéâ \n\n–Ø ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø—É—Ç–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤.üòä\n'
             '–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã —Å–º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑ –æ—à–∏–±–æ–∫ –∑–∞–ø–æ–ª–Ω—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫ '
             '–∏ –¥—Ä—É–≥–∏—Ö —Ä–∞–±–æ—á–∏—Ö –Ω—É–∂–¥. –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø–æ–µ–∑–¥–∫—É, –∏ —è –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –≥–æ—Ç–æ–≤—ã–π –ø—É—Ç–µ–≤–æ–π –ª–∏—Å—Ç,'
             ' –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–º–æ–∂–µ—Ç–µ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å. üìÑ\n\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞\n\n–≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏: ‚è∞\n–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è'
             ' –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—É—Ç–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤ –∏–∑–±–∞–≤–∏—Ç –≤–∞—Å –æ—Ç —Ä—É—Ç–∏–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã.\n\n'
             '–¢–æ—á–Ω–æ—Å—Ç—å: üéØ\n–ë–æ—Ç –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–∫–ª—é—á–∞—è –æ—à–∏–±–∫–∏.\n\n–£–¥–æ–±—Å—Ç–≤–æ: üíª\n–î–æ–∫—É–º–µ–Ω—Ç—ã –º–æ–∂–Ω–æ '
             ' —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –≤–∏–¥–µ.\n\n–ù–∞—á–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º '
             '—É–∂–µ —Å–µ–≥–æ–¥–Ω—è –∏ —É–ø—Ä–æ—Å—Ç–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å'
             ' –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—É—Ç–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤!üöÄ')
    try:
        logging.info('–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ')
        await message.answer(stext, reply_markup=start_vod)
    except ZeroDivisionError as err:
        logging.error(err)
        await message.answer('–û—à–∏–±–∫–∞‚ùå')


async def env_reg(message: types.Message):  #
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª—å! \n–î–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º —Ç–µ–±–µ –∞–≤—Ç–æ –¥–ª—è –Ω–∞—á–∞–ª–∞!',
                         reply_markup=cars_number)


# ===============================================================
# env_reg
@router.callback_query(F.data == "numbercars")  # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–Ω–æ–ø–∫–∏
async def start_number(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete()  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n\n–ü–†–ò–ú–ï–†: A341AA777')
    await state.set_state(Gen.car_number)


# ===============================================================
@router.callback_query(F.data == "start")
async def start(callback: types.CallbackQuery, state: FSMContext):
    logging.info('–ù–∞—á–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ 1/3 –∑–∞–ø—Ä–æ—Å–∞')
    try:
        await callback.answer()
        await callback.message.delete()
        await callback.message.answer('1/3\n–ß—Ç–æ–±—ã –≤–∞—à –ø—É—Ç–µ–≤–æ–π –ª–∏—Å—Ç –±—ã–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, '
                                      '–Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è.\n\n –ü–†–ò–ú–ï–†: –ò–≤–∞–Ω')
        await state.set_state(Gen.name)
    except ZeroDivisionError as err:
        logging.error(err)
        await callback.message.answer('–û—à–∏–±–∫–∞‚ùå')


# ===============================================================


@router.message(Gen.name)  # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
async def name(message: types.Message, state: FSMContext):
    names = message.text
    pattern = r'^[–∞-—è–ê-–Ø—ë–Å]+$'  # –ü—Ä–∏–º–µ—Ä —à–∞–±–ª–æ–Ω–∞, –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏—è
    if not re.match(pattern, names):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ü–†–ò–ú–ï–†: –ò–≤–∞–Ω')
        return
    await state.update_data(names=message.text)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    await message.answer('2/3\n–î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é. \n\n–ü–†–ò–ú–ï–†: –ò–≤–∞–Ω–æ–≤')
    await state.set_state(Gen.last_name)  # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞


@router.message(Gen.last_name)  # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
async def last_name(message: types.Message, state: FSMContext):
    last_sname = message.text
    pattern = r'^[–∞-—è–ê-–Ø—ë–Å]+$'  # –ü—Ä–∏–º–µ—Ä —à–∞–±–ª–æ–Ω–∞, –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏—è
    if not re.match(pattern, last_sname):
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ')
        return
    await state.update_data(last_names=message.text)
    await message.answer('3/3\n–î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω\n\n–ü–†–ò–ú–ï–†: +7XXXXXXXXXX')
    await state.set_state(Gen.iphone)


@router.message(Gen.iphone)
async def iphone(message: types.Message, state: FSMContext):
    phone_number = message.text
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    pattern = r"^\+\d{1,3}\d{9,15}$"  # –ü—Ä–∏–º–µ—Ä —à–∞–±–ª–æ–Ω–∞, –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏—è
    if not re.match(pattern, phone_number):
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX')
        return
    await state.update_data(iphone=message.text)
    data = await state.get_data()  # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    names = data.get("names", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    last_names = data.get("last_names", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    iphone_number = data.get("iphone", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    reg_date = datetime.date.today()
    if not await db.user_exists(message.from_user.id):
        await db.add_user(message.from_user.id, message.from_user.username, names, last_names, iphone_number,
                          reg_date)  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    else:
        pass
    msg = (f'–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n'
           f'–ò–º—è: {names}\n'
           f'–§–∞–º–∏–ª–∏—è: {last_names}\n'
           f'–¢–µ–ª–µ—Ñ–æ–Ω: {iphone_number}\n–í–≤–µ—Ä–Ω—ã–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∫–∞–∑–∞–ª–∏?\n')
    await message.answer(msg, reply_markup=info_vod)


# ===============================================================


# ===============================================================

@router.callback_query(F.data == "sinfo")
async def process_start(call: types.CallbackQuery):
    await call.answer()
    await call.message.delete()  # Correctly use call.message
    await env_reg(call.message)


@router.message(Gen.car_number)  # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞v
async def number_cars(message: types.Message, state: FSMContext):
    names = message.text
    pattern = r'^[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•]\d{3}[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•]{2}\d{2,3}$'
    await state.update_data(numbers_cars=message.text)
    number_car = str(names)
    if not re.match(pattern, names):
        await message.answer('–ù–æ–º–µ—Ä, –ø–æ—Ö–æ–∂–µ, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.')
    else:
        if await db.car_exists(number_car, message.from_user.id):
            await message.answer(f'–¢–∞–∫–æ–π {number_car} –µ—Å—Ç—å –≤ –±–∞–∑–µ')
            await gen_info(message)
            await state.clear()
        else:
            await message.answer('–ï—Å—Ç—å –ª–∏ —É –º–∞—à–∏–Ω—ã —Å–ø–µ—Ü –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ\n–ï—Å–ª–∏ –µ—Å—Ç—å '
                                 '–≤–≤–µ–¥–∏—Ç–µ –õ/—á–∞—Å\n\n–ï—Å–ª–∏ –Ω–µ—Ç—É –≤–≤–µ–¥–∏—Ç–µ 0.')
            await state.set_state(Gen.spec_litcar)
        # if not await db.car_exists(number_car):
        #     await db.add_vehicle(message.from_user.id, number_car)  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –±–∞–∑—É
        #     await db.create_car_table(number_car)  # —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ
        #     await message.answer('–í—Å–µ –≥–æ—Ç–æ–≤–æ, –æ–∂–∏–¥–∞–π—Ç–µ.')
        #     await state.clear()
        #     await asyncio.sleep(0.5)
        #     await gen_info(message)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        # else:
        #     await db.get_car_number(number_car)
        #     carinfo = await db.num_info_car(number_car)
        #     if carinfo:  # Check if carinfo is not None
        #         await message.answer(f'–¢–∞–∫–æ–π —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ\n\n'
        #                              f'–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –º–∞—à–∏–Ω–µ:\n'
        #                              f'–ù–æ–º–µ—Ä: {carinfo.get("nuber_car", "N/A")}\n'
        #                              f'–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂: {carinfo.get("start_km", "N/A")}\n'
        #                              f'–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂: {carinfo.get("end_km", "N/A")}\n'
        #                              f'–¢–æ–ø–ª–∏–≤–æ –ù–∞—á: {carinfo.get("fuel_start", "N/A")}\n'
        #                              f'–¢–æ–ø–ª–∏–≤–æ –ü–æ—Å: {carinfo.get("fuel_end", "N/A")}\n'
        #                              f'–û–±—â–∏–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂: {carinfo.get("total_km", "N/A")}\n'
        #                              f'–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—Ö–æ–¥: {carinfo.get("fuel_refuel", "N/A")}\n'
        #                              f'–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–¥–∏—Ç–µ–ª—å: {carinfo.get("user_name", "N/A")}\n')
        #     else:
        #         print(f'–ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã: {number_car}')
        #         await message.answer('–î–∞–Ω–Ω—ã–µ –æ–± —ç—Ç–æ–π –º–∞—à–∏–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')


@router.message(Gen.spec_litcar)
async def spec_litcar(message: types.Message, state: FSMContext):
    await state.update_data(spec_litcar=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ')
    await state.set_state(Gen.name_car)


@router.message(Gen.name_car)
async def name_car(message: types.Message, state: FSMContext):
    if len(message.text) <= 10:
        await state.update_data(name_car=message.text)
        await message.answer('–í—Å–µ –≥–æ—Ç–æ–≤–æ')
        vinfo = await state.get_data()
        number_cars = vinfo.get("numbers_cars", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        spec_litcar = vinfo.get("spec_litcar", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        name_car = vinfo.get("name_car", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        if int(spec_litcar) == 0:
            spec = 0
            await db.add_vehicle(number_cars, name_car, spec, message.from_user.id)
            await db.create_car_table(number_cars)
            await state.clear()
        else:
            await db.create_car_table(number_cars)
            await db.add_vehicle(number_cars, name_car, spec_litcar, message.from_user.id)
            await state.clear()
    else:
        logging.error(f'{message.from_user.id} –í–≤—ë–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –∞–≤—Ç–æ')
        await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 10 —Å–∏–º–≤–æ–ª–æ–≤!')


async def gen_info(message: types.Message):
    info = await db.get_user(message.from_user.id)
    logging.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {info}")
    await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {info["name"]}, {info["last_name"]}\n\n'
                         f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å:\n\n'
                         f'1. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—É—Ç–µ–≤–æ–π –ª–∏—Å—ÇüìÑ\n2. –í—ã–±—Ä–∞—Ç—å –ø—É—Ç–µ–≤–æ–π –ª–∏—Å—Çüìá\n3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–µüöò',
                         reply_markup=rep_start)


@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—É—Ç–µ–≤–æ–π –ª–∏—Å—ÇüìÑ')
async def list_car(message: types.Message, state: FSMContext):
    global auto
    global keyboard
    auto = await db.fetch_vehicle_info_by_user_id(message.from_user.id)  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω
    if auto:
        for num in auto:  # —Ü–∏–∫–ª –ø–æ —Å–ø–∏—Å–∫—É –º–∞—à–∏–Ω
            keyboard = types.InlineKeyboardMarkup(row_width=1, inline_keyboard=[
                [types.InlineKeyboardButton(text=f'{num[0]} | {num[1]}', callback_data=f"car_{num[0]}")],
            ])  # –ö–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –≤ –æ–¥–∏–Ω —Ä—è–¥
        await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É:', reply_markup=keyboard)
        await state.set_state(Gen.car_type)
    else:
        soz_avto = types.InlineKeyboardMarkup(row_width=1, inline_keyboard=[
            [types.InlineKeyboardButton(text='C–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ', callback_data='numbercars')]])
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –º–∞—à–∏–Ω', reply_markup=soz_avto)


@router.message(F.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–µüöò')
async def info_car(message: types.Message, state: FSMContext):
    global keyboards
    list_car = await db.list_car_numbers(message.from_user.id)
    print(list_car)
    auto = await db.fetch_vehicle_info_by_user_id(message.from_user.id)  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω
    if auto:
        for num in auto:  # —Ü–∏–∫–ª –ø–æ —Å–ø–∏—Å–∫—É –º–∞—à–∏–Ω
            keyboards = types.InlineKeyboardMarkup(row_width=1, inline_keyboard=[
                [types.InlineKeyboardButton(text=f'{num[0]} | {num[1]}', callback_data=f"info_{num[0]}")],
            ])  # –ö–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –≤ –æ–¥–∏–Ω —Ä—è–¥
        keyboard = types.InlineKeyboardMarkup(row_width=1, inline_keyboard=[
                [types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ', callback_data='numbercars')],
            ])
        
        ss = zip(keyboards, keyboard)
        await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É:', reply_markup=ss)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –º–∞—à–∏–Ω.')


@router.callback_query(lambda c: c.data and c.data.startswith("car_"))  # –ò–∑–º–µ–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ
async def car_selected(call: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—à–∏–Ω–µ
    car_type = call.data[4:]
    try:
        await state.update_data(car_type=car_type)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ state
        await call.answer(f"–í—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {car_type}")
        await call.message.delete()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
        auto = await db.fetch_vehicle_info_by_user_id(call.from_user.id)
        if auto[0]:
            for num in auto[0]:
                if num == car_type:
                    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∏–ª–æ–º–µ—Ç—Ä—ã:')
                    await state.set_state(Gen.start_km)
                    return  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            await call.message.answer('–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.')
            print(auto)
        else:
            await call.message.answer('–£ –≤–∞—Å –Ω–µ—Ç—É –º–∞—à–∏–Ω—ã.')
    except Exception as e:
        await call.message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')


@router.callback_query(lambda c: c.data and c.data.startswith("info_"))
async def info_car_selected(call: types.CallbackQuery, state: FSMContext):
    car_type = call.data[5:]
    try:
        # –ó–¥–µ—Å—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—à–∏–Ω–µ
        car_info = await db.fetch_vehicle_info(car_type)

        try:
            if car_info and car_info[0]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ car_info –Ω–µ –ø—É—Å—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç
                vehicle_name, special_equipment, vehicle_numbers = car_info[0]  # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∫–æ—Ä—Ç–µ–∂–∞
                await call.message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–µ {vehicle_numbers}:\n"
                                          f"–ù–∞–∑–≤–∞–Ω–∏–µ: {vehicle_name}\n"
                                          f"–°–ø–µ—Ü.–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {special_equipment} –õ.—á–∞—Å\n"
                                          f"–ù–æ–º–µ—Ä: {vehicle_numbers}")
            else:
                await call.message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–µ {car_type} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except Exception as e:
            logging.error(e)
            await call.answer()
        await call.answer()
    except Exception as e:
        await call.message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')


@router.message(Gen.start_km)
async def start_km(message: types.Message, state: FSMContext):
    await state.update_data(start_km=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–µ –∫–∏–ª–æ–º–µ—Ç—Ä—ã:')  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–Ω–µ—á–Ω—ã–µ –∫–∏–ª–æ–º–µ—Ç—Ä—ã
    await state.set_state(Gen.end_km)


@router.message(Gen.end_km)
async def end_km(message: types.Message, state: FSMContext):
    await state.update_data(end_km=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ:')
    await state.set_state(Gen.start_fuel)


@router.message(Gen.start_fuel)  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ
async def fuel_start(message: types.Message, state: FSMContext):
    await state.update_data(start_fuel=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–∞–∫–æ–π —Ä–∞—Å—Å—Ö–æ–¥: ')
    await state.set_state(Gen.total_comkm)


@router.message(Gen.total_comkm)
async def total_comkm(message: types.Message, state: FSMContext):
    await state.update_data(total_comkm=message.text)
    await message.answer('–í—ã —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø—Ä–∞–≤–ª—è–ª–∏—Å—å ?!\n'
                         '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø–ª–∏–≤–∞\n'
                         '–ï—Å–ª–∏ –Ω–µ –∑–∞–ø—Ä–∞–≤–ª—è–ª–∏—Å—å –Ω–∞–ø–∏—à—Ç–µ 0')
    await state.set_state(Gen.fuel_refuel)


@router.message(Gen.fuel_refuel)
async def fuel_refuel(message: types.Message, state: FSMContext):
    await state.update_data(fuel_refuel=message.text)
    vinfo = await state.get_data()
    kmst = vinfo.get("start_km", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    kmen = vinfo.get("end_km", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    fust = vinfo.get("start_fuel", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    aut = vinfo.get("car_type", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    fuel_refuel_st = vinfo.get("fuel_refuel", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    total_comkm_st = vinfo.get("total_comkm", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    await message.answer(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–µ:\n'
                         f'–ù–∞—á–∞–ª—å–Ω—ã–µ –∫–∏–ª–æ–º–µ—Ç—Ä—ã: {kmst}\n'
                         f'–ö–æ–Ω–µ—á–Ω—ã–µ –∫–∏–ª–æ–º–µ—Ç—Ä—ã: {kmen}\n'
                         f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ: {fust}\n'
                         f'–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞: {total_comkm_st}\n'
                         f'–ó–∞–ø—Ä–∞–≤–∫–∞: {fuel_refuel_st}\n'
                         f'–¢–∏–ø –º–∞—à–∏–Ω—ã: {aut}', reply_markup=reinfoveh)


@router.callback_query(F.data == 'reinfove')
async def reinfove(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É:', reply_markup=keyboard)


@router.callback_query(F.data == 'yesinfo')
async def yesinfo(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.delete()
    await uinfo(call.message, state)


async def uinfo(message: types.Message, state: FSMContext):
    global kmst, kmen, fust, fuel_refuel_st, total_comkm_st, summ_ob, fuct, end_ful, aut
    # –ù–∞—á–∞–ª—å–Ω—ã–π –∫–º,, –∫–æ–Ω–µ—á–Ω—ã–π –∫–º, –Ω–∞—á–∞–ª—å–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ, –∑–∞–ø—Ä–∞–≤–∫–∞, —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞, —Ç–∏–ø –º–∞—à–∏–Ω—ã
    vinfo = await state.get_data()
    kmst = vinfo.get("start_km", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")  # –ù–∞—á–∞–ª—å–Ω—ã–µ –∫–∏–ª–æ–º–µ—Ç—Ä—ã
    kmen = vinfo.get("end_km", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")  # –ö–æ–Ω–µ—á–Ω—ã–µ –∫–∏–ª–æ–º–µ—Ç—Ä—ã
    fust = vinfo.get("start_fuel", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ
    fuel_refuel_st = vinfo.get("fuel_refuel", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")  # –ó–∞–ø—Ä–∞–≤–∫–∞
    total_comkm_st = vinfo.get("total_comkm", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")  # –ö–∞–∫–æ–π —Ä–∞—Å—Ö–æ–¥
    aut = vinfo.get("car_type", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")  # –¢–∏–ø –º–∞—à–∏–Ω—ã

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —á–∏—Å–ª–∞
        kmst = float(kmst.replace(',', '.')) if kmst != "–ù–µ —É–∫–∞–∑–∞–Ω–æ" else 0  # –ù–∞—á–∞–ª—å–Ω—ã–µ –∫–∏–ª–æ–º–µ—Ç—Ä—ã
        kmen = float(kmen.replace(',', '.')) if kmen != "–ù–µ —É–∫–∞–∑–∞–Ω–æ" else 0  # –ö–æ–Ω–µ—á–Ω—ã–µ –∫–∏–ª–æ–º–µ—Ç—Ä—ã
        fust = float(fust.replace(',', '.')) if fust != "–ù–µ —É–∫–∞–∑–∞–Ω–æ" else 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ
        fuel_refuel_st = float(fuel_refuel_st.replace(',', '.')) if fuel_refuel_st != "–ù–µ —É–∫–∞–∑–∞–Ω–æ" else 0  # –ó–∞–ø—Ä–∞–≤–∫–∞
        total_comkm_st = float(total_comkm_st.replace(',', '.')) if total_comkm_st != "–ù–µ —É–∫–∞–∑–∞–Ω–æ" else 0  # —Ä–∞—Å—Ö–æ–¥

        # –†–∞—Å—á–µ—Ç—ã
        summ_ob = kmen - kmst  # –û–±—â–∏–π –ø—Ä–æ–±–µ–≥
        fuct = (summ_ob * total_comkm_st) / 100  # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—Ö–æ–¥
        end_ful = fust - fuct + fuel_refuel_st  # –¢–æ–ø–ª–∏–≤–æ –Ω–∞ –∫–æ–Ω–µ—Ü

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await message.answer(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–µ:\n'
                             f'–ù–∞—á–∞–ª—å–Ω—ã–µ –∫–∏–ª–æ–º–µ—Ç—Ä—ã: {kmst:.0f}\n'
                             f'–ö–æ–Ω–µ—á–Ω—ã–µ –∫–∏–ª–æ–º–µ—Ç—Ä—ã: {kmen:.0f}\n'
                             f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ: {fust:.2f}\n'
                             f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ –∫–æ–Ω–µ—Ü: {end_ful:.2f}\n'
                             f'–û–±—â–∏–π –ø—Ä–æ–±–µ–≥: {summ_ob:.0f}\n'
                             f'–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—Ö–æ–¥: {fuct:.1f}\n'
                             f'–ó–∞–ø—Ä–∞–≤–∫–∞: {fuel_refuel_st:.0f}\n'
                             f'–ú–∞—à–∏–Ω–∞: {aut}', reply_markup=access_vod)
        await state.clear()

    except ValueError as e:
        print(e)


@router.callback_query(F.data == 'yesaccess')
async def access_vods(call: types.CallbackQuery):
    await call.answer()
    date = datetime.date.today()
    info = await db.get_user(call.from_user.id)
    name = info.get('name')
    last_name = info.get('last_name')
    use_info = name + ' ' + last_name
    spec = await db.get_veh_id(aut)
    await db.add_car_info(aut, use_info, date, 0, 0, kmst, kmen, summ_ob, spec[0], fuct, fust, end_ful)
    await call.message.delete()
    await call.answer(f'–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–µ\n/START')
